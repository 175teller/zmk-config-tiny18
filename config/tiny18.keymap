#include <input/processors.dtsi>
#include <dt-bindings/zmk/input_transform.h>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    combos {
        compatible = "zmk,combos";

        q {
            bindings = <&kp Q>;
            key-positions = <1 0>;
            layers = <0>;
        };

        t {
            bindings = <&kp T>;
            key-positions = <1 2>;
            layers = <0>;
        };

        y {
            bindings = <&kp Y>;
            key-positions = <3 4>;
            layers = <0>;
        };

        p {
            bindings = <&kp P>;
            key-positions = <4 5>;
            layers = <0>;
        };

        b {
            bindings = <&kp B>;
            key-positions = <9 15>;
            layers = <0>;
        };

        j {
            bindings = <&kp J>;
            key-positions = <10 11>;
            layers = <0>;
        };

        lang2 {
            bindings = <&kp LANGUAGE_2>;
            key-positions = <17 11>;
            layers = <0 1 2 3 4>;
        };

        lang1 {
            bindings = <&kp LANGUAGE_1>;
            key-positions = <11 12>;
            layers = <0 1 2 3 4>;
        };

        tab {
            timeout-ms = <35>;
            bindings = <&kp TAB>;
            key-positions = <6 7>;
            layers = <0>;
        };

        del {
            bindings = <&kp DELETE>;
            key-positions = <10 16>;
            layers = <0 1 2 3 4>;
        };

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <16 17>;
            layers = <0 1 2 3 4>;
        };

        layer5 {
            bindings = <&mo 5>;
            key-positions = <5 13>;
            layers = <0>;
        };

        x {
            bindings = <&kp X>;
            key-positions = <14 15>;
            layers = <0>;
        };

        c {
            bindings = <&kp C>;
            key-positions = <9 8>;
            layers = <0>;
        };

        f {
            bindings = <&kp F>;
            key-positions = <7 8>;
            layers = <0>;
        };

        layer1_tab {
            bindings = <&kp DELETE>;
            key-positions = <10 16>;
            layers = <1>;
        };

        layer2_right_scroll {
            bindings = <&msc SCRL_RIGHT>;
            key-positions = <12 11>;
            layers = <2>;
        };

        layer2_left_scroll {
            bindings = <&msc SCRL_LEFT>;
            key-positions = <10 11>;
            layers = <2>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&lt 2 W  &kp E  &kp R  &kp U  &kp I  &lt 4 O  &mt LCTRL A  &mt LCTRL S  &mt LEFT_WIN D  &mt LEFT_ALT G  &mt RIGHT_SHIFT H  &lt 3 K  &lt 1 L  &mt RIGHT_SHIFT ENTER  &kp Z  &kp V  &kp N  &kp M
            >;
        };

        layer_1 {
            bindings = <
&kp SINGLE_QUOTE  &kp BACKSLASH  &kp EQUAL  &kp SLASH  &kp GRAVE  &kp RIGHT_WIN  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp COMMA  &kp PERIOD  &kp SPACE  &kp RIGHT_ALT  &trans  &kp RIGHT_SHIFT  &kp SEMICOLON  &kp MINUS  &kp ENTER  &kp BACKSPACE
            >;
        };

        layer_2 {
            bindings = <
&trans  &kp UP  &kp LEFT_ALT  &mkp MB1  &mmv MOVE_UP  &mkp MB2  &kp TAB  &kp LEFT  &kp DOWN  &kp RIGHT  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &kp RIGHT_WIN  &kp HOME  &kp END  &msc SCRL_UP  &msc SCRL_DOWN
            >;
        };

        layer_3 {
            bindings = <
&kp N7  &kp N8  &kp N9  &kp N0  &kp PLUS  &kp ASTRK  &kp N1  &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp SLASH  &trans  &kp RIGHT_WIN  &kp RIGHT_SHIFT  &kp N2  &kp N3  &kp COMMA  &kp PERIOD
            >;
        };

        layer_4 {
            bindings = <
&kp F7  &kp F8  &kp F9  &kp F10  &kp F11  &trans  &kp F1  &kp F4  &kp F5  &kp F6  &kp F12  &kp RIGHT_ALT  &kp RIGHT_WIN  &kp RIGHT_SHIFT  &kp F2  &kp F3  &kp RCTRL  &kp DELETE
            >;
        };

        layer_5 {
            bindings = <
&bt BT_DISC 0  &bt BT_DISC 1  &bt BT_DISC 2  &bt BT_SEL 0  &bt BT_SEL 1  &trans  &trans  &bt BT_DISC 3  &bt BT_DISC 4  &trans  &bt BT_SEL 2  &bt BT_SEL 3  &trans  &trans  &bt BT_CLR  &bt BT_CLR_ALL  &bt BT_SEL 4  &trans
            >;
        };
    };
};
